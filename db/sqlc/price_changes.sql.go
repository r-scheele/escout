// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: price_changes.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPriceChange = `-- name: CreatePriceChange :one
INSERT INTO price_changes (product_id, price, changed_at, created_at) VALUES ($1, $2, $3, $4) RETURNING id, product_id, price, changed_at, created_at
`

type CreatePriceChangeParams struct {
	ProductID int64              `json:"product_id"`
	Price     pgtype.Numeric     `json:"price"`
	ChangedAt pgtype.Timestamptz `json:"changed_at"`
	CreatedAt time.Time          `json:"created_at"`
}

func (q *Queries) CreatePriceChange(ctx context.Context, arg CreatePriceChangeParams) (PriceChange, error) {
	row := q.db.QueryRow(ctx, createPriceChange,
		arg.ProductID,
		arg.Price,
		arg.ChangedAt,
		arg.CreatedAt,
	)
	var i PriceChange
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Price,
		&i.ChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deletePriceChange = `-- name: DeletePriceChange :exec
DELETE FROM price_changes WHERE id = $1
`

func (q *Queries) DeletePriceChange(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePriceChange, id)
	return err
}

const getPriceChangeByID = `-- name: GetPriceChangeByID :one
SELECT id, product_id, price, changed_at, created_at FROM price_changes WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPriceChangeByID(ctx context.Context, id int64) (PriceChange, error) {
	row := q.db.QueryRow(ctx, getPriceChangeByID, id)
	var i PriceChange
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Price,
		&i.ChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPriceChangesByPriceRange = `-- name: GetPriceChangesByPriceRange :many
SELECT id, product_id, price, changed_at, created_at FROM price_changes WHERE price BETWEEN $1 AND $2 ORDER BY changed_at DESC LIMIT $3 OFFSET $4
`

type GetPriceChangesByPriceRangeParams struct {
	Price   pgtype.Numeric `json:"price"`
	Price_2 pgtype.Numeric `json:"price_2"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

func (q *Queries) GetPriceChangesByPriceRange(ctx context.Context, arg GetPriceChangesByPriceRangeParams) ([]PriceChange, error) {
	rows, err := q.db.Query(ctx, getPriceChangesByPriceRange,
		arg.Price,
		arg.Price_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceChange{}
	for rows.Next() {
		var i PriceChange
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Price,
			&i.ChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPriceChangesByTimeRange = `-- name: GetPriceChangesByTimeRange :many
SELECT id, product_id, price, changed_at, created_at FROM price_changes WHERE changed_at BETWEEN $1 AND $2 ORDER BY changed_at DESC LIMIT $3 OFFSET $4
`

type GetPriceChangesByTimeRangeParams struct {
	ChangedAt   pgtype.Timestamptz `json:"changed_at"`
	ChangedAt_2 pgtype.Timestamptz `json:"changed_at_2"`
	Limit       int32              `json:"limit"`
	Offset      int32              `json:"offset"`
}

func (q *Queries) GetPriceChangesByTimeRange(ctx context.Context, arg GetPriceChangesByTimeRangeParams) ([]PriceChange, error) {
	rows, err := q.db.Query(ctx, getPriceChangesByTimeRange,
		arg.ChangedAt,
		arg.ChangedAt_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceChange{}
	for rows.Next() {
		var i PriceChange
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Price,
			&i.ChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPriceChangesByProductID = `-- name: ListPriceChangesByProductID :many
SELECT id, product_id, price, changed_at, created_at FROM price_changes WHERE product_id = $1 ORDER BY changed_at DESC LIMIT $2 OFFSET $3
`

type ListPriceChangesByProductIDParams struct {
	ProductID int64 `json:"product_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListPriceChangesByProductID(ctx context.Context, arg ListPriceChangesByProductIDParams) ([]PriceChange, error) {
	rows, err := q.db.Query(ctx, listPriceChangesByProductID, arg.ProductID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceChange{}
	for rows.Next() {
		var i PriceChange
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Price,
			&i.ChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePriceChange = `-- name: UpdatePriceChange :one
UPDATE price_changes SET price = $2, changed_at = $3 WHERE id = $1 RETURNING id, product_id, price, changed_at, created_at
`

type UpdatePriceChangeParams struct {
	ID        int64              `json:"id"`
	Price     pgtype.Numeric     `json:"price"`
	ChangedAt pgtype.Timestamptz `json:"changed_at"`
}

func (q *Queries) UpdatePriceChange(ctx context.Context, arg UpdatePriceChangeParams) (PriceChange, error) {
	row := q.db.QueryRow(ctx, updatePriceChange, arg.ID, arg.Price, arg.ChangedAt)
	var i PriceChange
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Price,
		&i.ChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
